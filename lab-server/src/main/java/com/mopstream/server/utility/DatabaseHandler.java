package com.mopstream.server.utility;

import com.mopstream.common.utility.Outputer;

import java.sql.*;

/**
 * A class for handle database.
 */
public class DatabaseHandler {
    // Table names
    public static final String LAB_TABLE = "lab_work";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String DISCIPLINE_TABLE = "discipline";
    // LAB_TABLE column names
    public static final String LAB_TABLE_ID_COLUMN = "id";
    public static final String LAB_TABLE_NAME_COLUMN = "name";
    public static final String LAB_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String LAB_TABLE_MINIMIMAL_POINT_COLUMN = "minimal_point";
    public static final String LAB_TABLE_DIFFICULTY_COLUMN = "difficulty";
    public static final String LAB_TABLE_USER_ID_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    // COORDINATES_TABLE column names
    public static final String COORDINATES_TABLE_LAB_ID_COLUMN = "lab_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";
    // DISCIPLINE_TABLE column names
    public static final String DISCIPLINE_TABLE_LAB_ID_COLUMN = "lab_id";
    public static final String DISCIPLINE_TABLE_NAME_COLUMN = "name";
    public static final String DISCIPLINE_TABLE_PRACTICE_HOURS_COLUMN = "practice_hours";

    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            initializeDB();
            Outputer.println("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Драйвер управления базой данных не найден!");
        }
    }

    /**
     * @param sqlStatement SQL statement to be prepared.
     * @param generateKeys Is keys needed to be generated.
     * @return Pprepared statement.
     * @throws SQLException When there's exception inside.
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
        } catch (SQLException exception) {
        }
    }


    private void initializeDB() throws SQLException {

        connection = DriverManager.getConnection(url, user, password);
        Statement statement = connection.createStatement();

        statement.execute("CREATE SEQUENCE IF NOT EXISTS users_id_seq INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647");

        statement.execute("CREATE SEQUENCE IF NOT EXISTS labs_id_seq INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647");

        statement.execute("CREATE TABLE IF NOT EXISTS " + USER_TABLE +
                " ( "
                + USER_TABLE_ID_COLUMN + " INT NOT NULL PRIMARY KEY DEFAULT NEXTVAL('users_id_seq'), "
                + USER_TABLE_USERNAME_COLUMN + " VARCHAR(255) NOT NULL UNIQUE CHECK (" + USER_TABLE_USERNAME_COLUMN + "!= ''), "
                + USER_TABLE_PASSWORD_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + USER_TABLE_PASSWORD_COLUMN + "!= '')" +
                ")"
        );
        statement.execute("CREATE TABLE IF NOT EXISTS " + LAB_TABLE +
                " ( "
                + LAB_TABLE_ID_COLUMN + " INT NOT NULL PRIMARY KEY DEFAULT NEXTVAL('labs_id_seq'), "
                + LAB_TABLE_NAME_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + LAB_TABLE_NAME_COLUMN + "!= ''), "
                + LAB_TABLE_CREATION_DATE_COLUMN + " TIMESTAMP NOT NULL, "
                + LAB_TABLE_MINIMIMAL_POINT_COLUMN + " INTEGER CHECK (" + LAB_TABLE_MINIMIMAL_POINT_COLUMN + " >0), "
                + LAB_TABLE_DIFFICULTY_COLUMN + " VARCHAR(10) NOT NULL CHECK ("
                + LAB_TABLE_DIFFICULTY_COLUMN + " = 'VERY_EASY' " +
                "OR " + LAB_TABLE_DIFFICULTY_COLUMN + "= 'IMPOSSIBLE' " +
                "OR " + LAB_TABLE_DIFFICULTY_COLUMN + "= 'TERRIBLE'" + "), "
                + LAB_TABLE_USER_ID_COLUMN + " INTEGER NOT NULL REFERENCES " + USER_TABLE + "(" + USER_TABLE_ID_COLUMN + ")" +
                ")"
        );

        statement.execute("CREATE TABLE IF NOT EXISTS " + DISCIPLINE_TABLE +
                " ( "
                + DISCIPLINE_TABLE_LAB_ID_COLUMN + " INT NOT NULL REFERENCES " + LAB_TABLE + "(" + LAB_TABLE_ID_COLUMN + "), "
                + DISCIPLINE_TABLE_NAME_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + DISCIPLINE_TABLE_NAME_COLUMN + " != ''), "
                + DISCIPLINE_TABLE_PRACTICE_HOURS_COLUMN + " INTEGER NOT NULL " +
                ")"
        );
        statement.execute("CREATE TABLE IF NOT EXISTS " + COORDINATES_TABLE +
                " ( "
                + COORDINATES_TABLE_LAB_ID_COLUMN + " INT NOT NULL REFERENCES " + LAB_TABLE + "(" + LAB_TABLE_ID_COLUMN + "), "
                + COORDINATES_TABLE_X_COLUMN + " DOUBLE PRECISION NOT NULL, "
                + COORDINATES_TABLE_Y_COLUMN + " DOUBLE PRECISION CHECK (" + COORDINATES_TABLE_Y_COLUMN + " <= 334) " +
                ")"
        );

    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
        }
    }
}